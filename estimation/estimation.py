#!/usr/bin/env python                                                                                                                                                               
import os, sys
import math, random
import numpy as np
import ROOT
ROOT.PyConfig.IgnoreCommandLineOptions = True

from ROOT import gROOT, gStyle
from ROOT import TFile, TTree, AddressOf, TGraphErrors, TCanvas, TBox, TLegend, TPaveText, TH2F, TH1F

gStyle.SetOptStat(0)

gROOT.ProcessLine(
"struct diphStruct {\
   Float_t   mass;\
   Float_t   rap;\
   Float_t   xim;\
   Float_t   xip;\
   Long64_t  crossingAngle;\
   Char_t    era[5];\
   Float_t   weight;\
};");

gROOT.ProcessLine(
"struct proStruct {\
   Int_t    num_m;\
   Int_t    num_p;\
   Float_t  xim[12];\
   Float_t  xip[12];\
};");

from ROOT import diphStruct, proStruct
diph_struct = diphStruct()
pro_struct  = proStruct()


# Flags
experiments = 1000     # number of iterations
plotting = False     # make matching plot for each experiment
testing  = False    # only run over a few events
test_events = 10    # number of events to use for testing
method = 'multiRP' # singleRP or multiRP reconstruction
year = '2016'

#diphoton_file = TFile( 'diphotonEvents_data%s_Xi_%s.root' % (year,method) ) # data
diphoton_file = TFile( 'diphotonEvents_data%s_ReverseElastic_%s.root' % (year,method) ) # reverse elsastic
#diphoton_file = TFile( 'diphotonEvents_ggj%s_Xi_%s.root' % (year,method) ) # MC

proton_file = TFile( 'protonEvents_%s_%s.root' % (method,year) )

if 'data' in diphoton_file.GetName():
    data_ = True
    sample_string = 'data'
else:
    data_ = False
    sample_string = 'mc'
    if year == '2016':
        v_eras = ['2016B', '2016C', '2016G']
        v_crossingAngles = [120.0]
    elif year == '2017': 
        v_eras = ['2017B', '2017C', '2017D', '2017E', '2017F']
        v_crossingAngles = [120.0, 130.0, 140.0, 150.0]
    elif year == '2018': 
        v_eras = ['2018A', '2018B', '2018C', '2018D']
        v_crossingAngles = [130, 131, 132, 133, 134, 135, 136, 137, 138, 139,
                            140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
                            150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
                            160]

diphoton_tree = diphoton_file.Get( 'tree' )
diphoton_tree.SetBranchAddress('mass', AddressOf( diph_struct, 'mass'))
diphoton_tree.SetBranchAddress('rap', AddressOf( diph_struct, 'rap'))
diphoton_tree.SetBranchAddress('xim', AddressOf( diph_struct, 'xim'))
diphoton_tree.SetBranchAddress('xip', AddressOf( diph_struct, 'xip'))
diphoton_tree.SetBranchAddress('crossingAngle', AddressOf( diph_struct, 'crossingAngle'))
diphoton_tree.SetBranchAddress('era', AddressOf( diph_struct, 'era'))
diphoton_tree.SetBranchAddress('weight', AddressOf( diph_struct, 'weight'))


if year =='2018':
    tree_A_120 = proton_file.Get( 'tree_A_120' )
    tree_A_120.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_120.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_120.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_120.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_121 = proton_file.Get( 'tree_A_121' )
    tree_A_121.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_121.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_121.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_121.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_122 = proton_file.Get( 'tree_A_122' )
    tree_A_122.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_122.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_122.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_122.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_123 = proton_file.Get( 'tree_A_123' )
    tree_A_123.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_123.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_123.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_123.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_124 = proton_file.Get( 'tree_A_124' )
    tree_A_124.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_124.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_124.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_124.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_125 = proton_file.Get( 'tree_A_125' )
    tree_A_125.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_125.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_125.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_125.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_126 = proton_file.Get( 'tree_A_126' )
    tree_A_126.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_126.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_126.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_126.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_127 = proton_file.Get( 'tree_A_127' )
    tree_A_127.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_127.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_127.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_127.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_128 = proton_file.Get( 'tree_A_128' )
    tree_A_128.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_128.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_128.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_128.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_129 = proton_file.Get( 'tree_A_129' )
    tree_A_129.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_129.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_129.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_129.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_130 = proton_file.Get( 'tree_A_130' )
    tree_A_130.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_130.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_130.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_130.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_131 = proton_file.Get( 'tree_A_131' )
    tree_A_131.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_131.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_131.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_131.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_132 = proton_file.Get( 'tree_A_132' )
    tree_A_132.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_132.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_132.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_132.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_133 = proton_file.Get( 'tree_A_133' )
    tree_A_133.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_133.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_133.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_133.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_134 = proton_file.Get( 'tree_A_134' )
    tree_A_134.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_134.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_134.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_134.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_135 = proton_file.Get( 'tree_A_135' )
    tree_A_135.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_135.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_135.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_135.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_136 = proton_file.Get( 'tree_A_136' )
    tree_A_136.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_136.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_136.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_136.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_137 = proton_file.Get( 'tree_A_137' )
    tree_A_137.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_137.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_137.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_137.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_138 = proton_file.Get( 'tree_A_138' )
    tree_A_138.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_138.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_138.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_138.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_139 = proton_file.Get( 'tree_A_139' )
    tree_A_139.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_139.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_139.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_139.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_140 = proton_file.Get( 'tree_A_140' )
    tree_A_140.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_140.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_140.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_140.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_141 = proton_file.Get( 'tree_A_141' )
    tree_A_141.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_141.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_141.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_141.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_142 = proton_file.Get( 'tree_A_142' )
    tree_A_142.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_142.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_142.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_142.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_143 = proton_file.Get( 'tree_A_143' )
    tree_A_143.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_143.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_143.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_143.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_144 = proton_file.Get( 'tree_A_144' )
    tree_A_144.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_144.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_144.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_144.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_145 = proton_file.Get( 'tree_A_145' )
    tree_A_145.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_145.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_145.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_145.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_146 = proton_file.Get( 'tree_A_146' )
    tree_A_146.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_146.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_146.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_146.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_147 = proton_file.Get( 'tree_A_147' )
    tree_A_147.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_147.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_147.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_147.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_148 = proton_file.Get( 'tree_A_148' )
    tree_A_148.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_148.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_148.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_148.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_149 = proton_file.Get( 'tree_A_149' )
    tree_A_149.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_149.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_149.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_149.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_150 = proton_file.Get( 'tree_A_150' )
    tree_A_150.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_150.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_150.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_150.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_151 = proton_file.Get( 'tree_A_151' )
    tree_A_151.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_151.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_151.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_151.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_152 = proton_file.Get( 'tree_A_152' )
    tree_A_152.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_152.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_152.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_152.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_153 = proton_file.Get( 'tree_A_153' )
    tree_A_153.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_153.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_153.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_153.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_154 = proton_file.Get( 'tree_A_154' )
    tree_A_154.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_154.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_154.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_154.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_155 = proton_file.Get( 'tree_A_155' )
    tree_A_155.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_155.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_155.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_155.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_156 = proton_file.Get( 'tree_A_156' )
    tree_A_156.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_156.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_156.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_156.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_157 = proton_file.Get( 'tree_A_157' )
    tree_A_157.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_157.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_157.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_157.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_158 = proton_file.Get( 'tree_A_158' )
    tree_A_158.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_158.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_158.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_158.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_159 = proton_file.Get( 'tree_A_159' )
    tree_A_159.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_159.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_159.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_159.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_A_160 = proton_file.Get( 'tree_A_160' )
    tree_A_160.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_A_160.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_A_160.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_A_160.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_120 = proton_file.Get( 'tree_B_120' )
    tree_B_120.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_120.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_120.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_120.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_121 = proton_file.Get( 'tree_B_121' )
    tree_B_121.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_121.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_121.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_121.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_122 = proton_file.Get( 'tree_B_122' )
    tree_B_122.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_122.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_122.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_122.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_123 = proton_file.Get( 'tree_B_123' )
    tree_B_123.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_123.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_123.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_123.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_124 = proton_file.Get( 'tree_B_124' )
    tree_B_124.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_124.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_124.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_124.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_125 = proton_file.Get( 'tree_B_125' )
    tree_B_125.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_125.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_125.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_125.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_126 = proton_file.Get( 'tree_B_126' )
    tree_B_126.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_126.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_126.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_126.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_127 = proton_file.Get( 'tree_B_127' )
    tree_B_127.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_127.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_127.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_127.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_128 = proton_file.Get( 'tree_B_128' )
    tree_B_128.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_128.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_128.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_128.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_129 = proton_file.Get( 'tree_B_129' )
    tree_B_129.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_129.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_129.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_129.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_130 = proton_file.Get( 'tree_B_130' )
    tree_B_130.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_130.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_130.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_130.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_131 = proton_file.Get( 'tree_B_131' )
    tree_B_131.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_131.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_131.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_131.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_132 = proton_file.Get( 'tree_B_132' )
    tree_B_132.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_132.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_132.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_132.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_133 = proton_file.Get( 'tree_B_133' )
    tree_B_133.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_133.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_133.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_133.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_134 = proton_file.Get( 'tree_B_134' )
    tree_B_134.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_134.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_134.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_134.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_135 = proton_file.Get( 'tree_B_135' )
    tree_B_135.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_135.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_135.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_135.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_136 = proton_file.Get( 'tree_B_136' )
    tree_B_136.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_136.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_136.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_136.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_137 = proton_file.Get( 'tree_B_137' )
    tree_B_137.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_137.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_137.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_137.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_138 = proton_file.Get( 'tree_B_138' )
    tree_B_138.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_138.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_138.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_138.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_139 = proton_file.Get( 'tree_B_139' )
    tree_B_139.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_139.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_139.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_139.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_140 = proton_file.Get( 'tree_B_140' )
    tree_B_140.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_140.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_140.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_140.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_141 = proton_file.Get( 'tree_B_141' )
    tree_B_141.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_141.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_141.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_141.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_142 = proton_file.Get( 'tree_B_142' )
    tree_B_142.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_142.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_142.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_142.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_143 = proton_file.Get( 'tree_B_143' )
    tree_B_143.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_143.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_143.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_143.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_144 = proton_file.Get( 'tree_B_144' )
    tree_B_144.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_144.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_144.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_144.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_145 = proton_file.Get( 'tree_B_145' )
    tree_B_145.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_145.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_145.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_145.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_146 = proton_file.Get( 'tree_B_146' )
    tree_B_146.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_146.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_146.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_146.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_147 = proton_file.Get( 'tree_B_147' )
    tree_B_147.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_147.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_147.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_147.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_148 = proton_file.Get( 'tree_B_148' )
    tree_B_148.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_148.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_148.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_148.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_149 = proton_file.Get( 'tree_B_149' )
    tree_B_149.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_149.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_149.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_149.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_150 = proton_file.Get( 'tree_B_150' )
    tree_B_150.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_150.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_150.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_150.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_151 = proton_file.Get( 'tree_B_151' )
    tree_B_151.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_151.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_151.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_151.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_152 = proton_file.Get( 'tree_B_152' )
    tree_B_152.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_152.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_152.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_152.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_153 = proton_file.Get( 'tree_B_153' )
    tree_B_153.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_153.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_153.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_153.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_154 = proton_file.Get( 'tree_B_154' )
    tree_B_154.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_154.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_154.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_154.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_155 = proton_file.Get( 'tree_B_155' )
    tree_B_155.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_155.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_155.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_155.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_156 = proton_file.Get( 'tree_B_156' )
    tree_B_156.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_156.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_156.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_156.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_157 = proton_file.Get( 'tree_B_157' )
    tree_B_157.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_157.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_157.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_157.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_158 = proton_file.Get( 'tree_B_158' )
    tree_B_158.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_158.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_158.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_158.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_159 = proton_file.Get( 'tree_B_159' )
    tree_B_159.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_159.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_159.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_159.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_160 = proton_file.Get( 'tree_B_160' )
    tree_B_160.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_160.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_160.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_160.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))

    tree_C_120 = proton_file.Get( 'tree_C_120' )
    tree_C_120.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_120.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_120.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_120.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_121 = proton_file.Get( 'tree_C_121' )
    tree_C_121.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_121.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_121.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_121.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_122 = proton_file.Get( 'tree_C_122' )
    tree_C_122.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_122.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_122.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_122.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_123 = proton_file.Get( 'tree_C_123' )
    tree_C_123.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_123.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_123.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_123.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_124 = proton_file.Get( 'tree_C_124' )
    tree_C_124.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_124.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_124.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_124.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_125 = proton_file.Get( 'tree_C_125' )
    tree_C_125.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_125.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_125.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_125.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_126 = proton_file.Get( 'tree_C_126' )
    tree_C_126.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_126.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_126.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_126.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_127 = proton_file.Get( 'tree_C_127' )
    tree_C_127.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_127.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_127.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_127.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_128 = proton_file.Get( 'tree_C_128' )
    tree_C_128.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_128.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_128.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_128.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_129 = proton_file.Get( 'tree_C_129' )
    tree_C_129.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_129.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_129.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_129.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_130 = proton_file.Get( 'tree_C_130' )
    tree_C_130.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_130.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_130.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_130.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_131 = proton_file.Get( 'tree_C_131' )
    tree_C_131.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_131.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_131.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_131.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_132 = proton_file.Get( 'tree_C_132' )
    tree_C_132.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_132.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_132.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_132.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_133 = proton_file.Get( 'tree_C_133' )
    tree_C_133.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_133.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_133.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_133.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_134 = proton_file.Get( 'tree_C_134' )
    tree_C_134.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_134.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_134.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_134.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_135 = proton_file.Get( 'tree_C_135' )
    tree_C_135.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_135.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_135.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_135.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_136 = proton_file.Get( 'tree_C_136' )
    tree_C_136.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_136.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_136.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_136.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_137 = proton_file.Get( 'tree_C_137' )
    tree_C_137.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_137.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_137.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_137.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_138 = proton_file.Get( 'tree_C_138' )
    tree_C_138.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_138.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_138.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_138.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_139 = proton_file.Get( 'tree_C_139' )
    tree_C_139.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_139.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_139.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_139.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_140 = proton_file.Get( 'tree_C_140' )
    tree_C_140.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_140.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_140.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_140.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_141 = proton_file.Get( 'tree_C_141' )
    tree_C_141.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_141.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_141.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_141.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_142 = proton_file.Get( 'tree_C_142' )
    tree_C_142.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_142.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_142.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_142.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_143 = proton_file.Get( 'tree_C_143' )
    tree_C_143.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_143.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_143.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_143.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_144 = proton_file.Get( 'tree_C_144' )
    tree_C_144.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_144.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_144.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_144.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_145 = proton_file.Get( 'tree_C_145' )
    tree_C_145.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_145.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_145.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_145.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_146 = proton_file.Get( 'tree_C_146' )
    tree_C_146.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_146.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_146.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_146.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_147 = proton_file.Get( 'tree_C_147' )
    tree_C_147.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_147.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_147.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_147.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_148 = proton_file.Get( 'tree_C_148' )
    tree_C_148.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_148.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_148.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_148.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_149 = proton_file.Get( 'tree_C_149' )
    tree_C_149.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_149.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_149.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_149.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_150 = proton_file.Get( 'tree_C_150' )
    tree_C_150.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_150.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_150.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_150.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_151 = proton_file.Get( 'tree_C_151' )
    tree_C_151.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_151.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_151.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_151.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_152 = proton_file.Get( 'tree_C_152' )
    tree_C_152.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_152.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_152.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_152.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_153 = proton_file.Get( 'tree_C_153' )
    tree_C_153.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_153.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_153.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_153.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_154 = proton_file.Get( 'tree_C_154' )
    tree_C_154.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_154.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_154.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_154.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_155 = proton_file.Get( 'tree_C_155' )
    tree_C_155.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_155.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_155.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_155.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_156 = proton_file.Get( 'tree_C_156' )
    tree_C_156.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_156.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_156.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_156.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_157 = proton_file.Get( 'tree_C_157' )
    tree_C_157.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_157.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_157.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_157.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_158 = proton_file.Get( 'tree_C_158' )
    tree_C_158.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_158.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_158.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_158.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_159 = proton_file.Get( 'tree_C_159' )
    tree_C_159.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_159.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_159.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_159.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_160 = proton_file.Get( 'tree_C_160' )
    tree_C_160.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_160.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_160.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_160.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))

    tree_D_120 = proton_file.Get( 'tree_D_120' )
    tree_D_120.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_120.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_120.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_120.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_121 = proton_file.Get( 'tree_D_121' )
    tree_D_121.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_121.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_121.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_121.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_122 = proton_file.Get( 'tree_D_122' )
    tree_D_122.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_122.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_122.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_122.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_123 = proton_file.Get( 'tree_D_123' )
    tree_D_123.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_123.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_123.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_123.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_124 = proton_file.Get( 'tree_D_124' )
    tree_D_124.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_124.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_124.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_124.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_125 = proton_file.Get( 'tree_D_125' )
    tree_D_125.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_125.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_125.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_125.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_126 = proton_file.Get( 'tree_D_126' )
    tree_D_126.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_126.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_126.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_126.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_127 = proton_file.Get( 'tree_D_127' )
    tree_D_127.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_127.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_127.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_127.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_128 = proton_file.Get( 'tree_D_128' )
    tree_D_128.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_128.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_128.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_128.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_129 = proton_file.Get( 'tree_D_129' )
    tree_D_129.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_129.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_129.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_129.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_130 = proton_file.Get( 'tree_D_130' )
    tree_D_130.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_130.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_130.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_130.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_131 = proton_file.Get( 'tree_D_131' )
    tree_D_131.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_131.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_131.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_131.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_132 = proton_file.Get( 'tree_D_132' )
    tree_D_132.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_132.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_132.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_132.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_133 = proton_file.Get( 'tree_D_133' )
    tree_D_133.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_133.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_133.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_133.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_134 = proton_file.Get( 'tree_D_134' )
    tree_D_134.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_134.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_134.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_134.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_135 = proton_file.Get( 'tree_D_135' )
    tree_D_135.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_135.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_135.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_135.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_136 = proton_file.Get( 'tree_D_136' )
    tree_D_136.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_136.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_136.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_136.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_137 = proton_file.Get( 'tree_D_137' )
    tree_D_137.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_137.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_137.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_137.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_138 = proton_file.Get( 'tree_D_138' )
    tree_D_138.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_138.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_138.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_138.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_139 = proton_file.Get( 'tree_D_139' )
    tree_D_139.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_139.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_139.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_139.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_140 = proton_file.Get( 'tree_D_140' )
    tree_D_140.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_140.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_140.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_140.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_141 = proton_file.Get( 'tree_D_141' )
    tree_D_141.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_141.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_141.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_141.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_142 = proton_file.Get( 'tree_D_142' )
    tree_D_142.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_142.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_142.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_142.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_143 = proton_file.Get( 'tree_D_143' )
    tree_D_143.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_143.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_143.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_143.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_144 = proton_file.Get( 'tree_D_144' )
    tree_D_144.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_144.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_144.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_144.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_145 = proton_file.Get( 'tree_D_145' )
    tree_D_145.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_145.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_145.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_145.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_146 = proton_file.Get( 'tree_D_146' )
    tree_D_146.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_146.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_146.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_146.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_147 = proton_file.Get( 'tree_D_147' )
    tree_D_147.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_147.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_147.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_147.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_148 = proton_file.Get( 'tree_D_148' )
    tree_D_148.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_148.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_148.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_148.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_149 = proton_file.Get( 'tree_D_149' )
    tree_D_149.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_149.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_149.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_149.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_150 = proton_file.Get( 'tree_D_150' )
    tree_D_150.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_150.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_150.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_150.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_151 = proton_file.Get( 'tree_D_151' )
    tree_D_151.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_151.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_151.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_151.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_152 = proton_file.Get( 'tree_D_152' )
    tree_D_152.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_152.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_152.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_152.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_153 = proton_file.Get( 'tree_D_153' )
    tree_D_153.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_153.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_153.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_153.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_154 = proton_file.Get( 'tree_D_154' )
    tree_D_154.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_154.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_154.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_154.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_155 = proton_file.Get( 'tree_D_155' )
    tree_D_155.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_155.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_155.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_155.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_156 = proton_file.Get( 'tree_D_156' )
    tree_D_156.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_156.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_156.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_156.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_157 = proton_file.Get( 'tree_D_157' )
    tree_D_157.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_157.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_157.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_157.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_158 = proton_file.Get( 'tree_D_158' )
    tree_D_158.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_158.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_158.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_158.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_159 = proton_file.Get( 'tree_D_159' )
    tree_D_159.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_159.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_159.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_159.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_160 = proton_file.Get( 'tree_D_160' )
    tree_D_160.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_160.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_160.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_160.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))

elif year == '2017':
    tree_B_120 = proton_file.Get( 'tree_B_120' )
    tree_B_120.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_120.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_120.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_120.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_130 = proton_file.Get( 'tree_B_130' )
    tree_B_130.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_130.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_130.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_130.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_140 = proton_file.Get( 'tree_B_140' )
    tree_B_140.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_140.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_140.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_140.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_B_150 = proton_file.Get( 'tree_B_150' )
    tree_B_150.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B_150.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B_150.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B_150.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))

    tree_C_120 = proton_file.Get( 'tree_C_120' )
    tree_C_120.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_120.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_120.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_120.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_130 = proton_file.Get( 'tree_C_130' )
    tree_C_130.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_130.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_130.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_130.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_140 = proton_file.Get( 'tree_C_140' )
    tree_C_140.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_140.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_140.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_140.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_C_150 = proton_file.Get( 'tree_C_150' )
    tree_C_150.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C_150.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C_150.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C_150.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))

    tree_D_120 = proton_file.Get( 'tree_D_120' )
    tree_D_120.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_120.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_120.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_120.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_130 = proton_file.Get( 'tree_D_130' )
    tree_D_130.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_130.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_130.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_130.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_140 = proton_file.Get( 'tree_D_140' )
    tree_D_140.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_140.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_140.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_140.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_D_150 = proton_file.Get( 'tree_D_150' )
    tree_D_150.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_D_150.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_D_150.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_D_150.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))

    tree_E_120 = proton_file.Get( 'tree_E_120' )
    tree_E_120.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_E_120.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_E_120.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_E_120.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_E_130 = proton_file.Get( 'tree_E_130' )
    tree_E_130.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_E_130.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_E_130.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_E_130.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_E_140 = proton_file.Get( 'tree_E_140' )
    tree_E_140.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_E_140.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_E_140.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_E_140.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_E_150 = proton_file.Get( 'tree_E_150' )
    tree_E_150.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_E_150.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_E_150.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_E_150.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))

    tree_F_120 = proton_file.Get( 'tree_F_120' )
    tree_F_120.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_F_120.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_F_120.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_F_120.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_F_130 = proton_file.Get( 'tree_F_130' )
    tree_F_130.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_F_130.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_F_130.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_F_130.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_F_140 = proton_file.Get( 'tree_F_140' )
    tree_F_140.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_F_140.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_F_140.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_F_140.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))
    tree_F_150 = proton_file.Get( 'tree_F_150' )
    tree_F_150.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_F_150.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_F_150.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_F_150.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))

elif year == '2016':
    tree_B = proton_file.Get( 'tree_B' )
    tree_B.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_B.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_B.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_B.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))

    tree_C = proton_file.Get( 'tree_C' )
    tree_C.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_C.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_C.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_C.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))

    tree_G = proton_file.Get( 'tree_G' )
    tree_G.SetBranchAddress('num_m', AddressOf( pro_struct, 'num_m'))
    tree_G.SetBranchAddress('num_p', AddressOf( pro_struct, 'num_p'))
    tree_G.SetBranchAddress('xim', AddressOf( pro_struct, 'xim'))
    tree_G.SetBranchAddress('xip', AddressOf( pro_struct, 'xip'))


gr_estimate = TGraphErrors('gr_estimate')
#gr_converge = ROOT.TGraph('gr_converge')
#gr_converge.SetName('gr_converge')
h2_estimate = TH2F( 'h2_estimate', '', 100, -20, 20, 100, -20, 20)
h2_xim = TH2F( 'h2_xim', '', 100, 0, 0.2, 100, 0, 0.2 )
h2_xip = TH2F( 'h2_xip', '', 100, 0, 0.2, 100, 0, 0.2 )

h_xip = TH1F('h_xip', '#xi ^{+}', 100, 0., 0.25)
h_xim = TH1F('h_xim', '#xi ^{-}', 100, 0., 0.25)

converge = []
points = [100000]
for i in range(1,10):
    for j in range(5):
        point = i*math.pow(10,j)
        points.append(int(point))
points.sort()


#----------------------------------

def find_nearest(array, value):
    if len(array) == 0: return -1
    return min(array, key=lambda x:abs(x-value))

#----------------------------------

def getMass(xim,xip):
    if xim < 0 or xip < 0: return -1
    else: return 13000.0 * math.sqrt(xim*xip)

#----------------------------------

def getRap(xip,xim):
    if xim < 0 or xip < 0: return -999
    else: return 0.5*math.log(xim/xip)

#----------------------------------

def rapidity_err(xim,xip):
    rel_xi_err = 0.08
    xim_err, xip_err = xim * rel_xi_err, xip * rel_xi_err
    return 0.5 * math.sqrt( pow(xim_err/xim,2) + pow(xip_err/xip,2) )

#----------------------------------

def isMatching(cms_mass,cms_rap,pro_xim,pro_xip):
    pps_mass, pps_rap = getMass(pro_xim,pro_xip), getRap(pro_xim,pro_xip)
    if pps_mass == -1: return 999, 999
    pps_rap_err = rapidity_err(pro_xim,pro_xip)
    pps_mass_err = pps_mass * pps_rap_err
    rel_mass_err, rel_rap_err = 0.02, 0.074
    mass_point = (pps_mass - cms_mass) / (pps_mass_err + cms_mass*rel_mass_err)
    rap_point = (pps_rap - cms_rap) / (pps_rap_err + rel_rap_err*cms_rap)
    return mass_point, rap_point

#----------------------------------

def weighted_choice(choices):
   total = sum(w for c, w in choices)
   r = random.uniform(0, total)
   upto = 0
   for c, w in choices:
      if upto + w >= r:
         return c
      upto += w
   assert False, "Shouldn't get here"

#----------------------------------

def getEra(year):
    if year == '2016':
        choices = [['2016B', 0.42], ['2016C', 0.16], ['2016G', 0.32]]
    elif year == '2017':
        choices = [['2017B',0.0541], ['2017C',0.3419], ['2017D',0.1311], ['2017E',0.1054], ['2017F',0.3675]]
    elif year == '2018':
        choices = [['2018A', 0.22], ['2018B', 0.11], ['2018C', 0.11], ['2018D', 0.56]]
    era = weighted_choice(choices)
    return era

#----------------------------------

def getXangle(era):
    if era == '2017B': choices = [['120',0.1716], ['130',0.1980], ['140',0.2981], ['150',0.3323]]
    elif era == '2017C': choices = [['120',0.2199], ['130',0.2743], ['140',0.1844], ['150',0.3214]]
    elif era == '2017D': choices = [['120',0.1614], ['130',0.2846], ['140',0.2614], ['150',0.2926]]
    elif era == '2017E': choices = [['120',0.2932], ['130',0.3478], ['140',0.1355], ['150',0.1610]]
    elif era == '2017F': choices = [['120',0.4090], ['130',0.2392], ['140',0.0403], ['150',0.3115]]
    elif '2018' in era: choices = [[130,0.64], [131,0.02], [132,0.02], [133,0.02], [134,0.02], 
                                   [135,0.02], [136,0.01], [137,0.01], [138,0.01], [139,0.01], 
                                   [140,0.01], [141,0.01], [142,0.01], [143,0.01], [144,0.01],
                                   [145,0.01], [146,0.01], [147,0.01], [148,0.01], [149,0.01],
                                   [150,0.005], [151,0.005], [152,0.005], [153,0.005], [154,0.005],
                                   [155,0.005], [156,0.005], [157,0.005], [158,0.005], [159,0.00],
                                   [160,0.08]]
    crossingAngle = weighted_choice(choices)
    return int(crossingAngle)

#----------------------------------

def getAverage(v):
    if len(v) == 0: return 0
    return float( sum(v) ) / float( len(v) )

#----------------------------------

def plot_estimate(gr,name):
    c = TCanvas('c','',750,600)
    c.cd()
    
    gr.SetLineColor(ROOT.kBlack)
    gr.SetTitle('')
    gr.GetXaxis().SetTitle("(m_{pp}-m_{#gamma#gamma})/#sigma(m_{pp}-m_{#gamma#gamma})")
    gr.GetYaxis().SetTitle("(y_{pp} - y_{#gamma#gamma})/#sigma(y_{pp} - y_{#gamma#gamma})")
    gr.GetXaxis().SetLimits(-20,20)
    gr.GetYaxis().SetRangeUser(-20,20)
    gr.SetMarkerSize(0.5)
    gr.SetMarkerStyle(24)
    gr.Draw("AP")
    
    b2 = TBox(-3, -3, 3, 3)
    b2.SetFillStyle(3001) # transparent
    b2.SetFillColor(5)
    b2.SetLineColor(1)
    b2.Draw()
    b1 = TBox(-2, -2, 2, 2)
    b1.SetFillStyle(3001) # transparent
    b1.SetFillColor(3) 
    b1.SetLineColor(1)
    b1.Draw()
    legend = TLegend(0.7,0.8,0.9,0.9)
    legend.AddEntry(b1,"2#sigma matching",'f')
    legend.AddEntry(b2,"3#sigma matching",'f')
    legend.Draw()
    c.Update() 
    pLabel = prelimLabel()
    pLabel.Draw()
    sLabel = selectionLabel('Background Estimation ('+method+')')
    sLabel.Draw()
    lLabel = lumiLabel()
    lLabel.Draw()
    c.SaveAs(name)

#----------------------------------

def prelimLabel():
    label = TPaveText( 0.14, 0.8, 0.2, 0.87, 'NB NDC' )
    label.SetFillStyle(0)
    label.SetBorderSize(0)
    label.SetLineWidth(0)
    label.SetLineStyle(0)
    label.SetTextAlign(11)
    label.AddText( "#font[62]{CMS}" )
    label.AddText( "#scale[0.75]{#font[52]{Preliminary}}" )
    label.SetTextSize(0.043)
    label.SetTextFont( 52 )
    label.SetTextColor( 1 )
    return label

#----------------------------------

def selectionLabel(text):
    label = TPaveText(0.08, 0.88, .6, 0.95, 'NB NDC' )
    label.SetFillStyle(0)
    label.SetBorderSize(0)
    label.SetLineWidth(0)
    label.SetLineStyle(0)
    label.AddText( text )
    label.SetTextSize( 0.03 )
    label.SetTextAlign(11)
    label.SetTextFont( 52 )
    label.SetTextColor( 1 )
    return label

#----------------------------------

def lumiLabel():
    label = TPaveText( 0.7, 0.88, 0.8, 0.93, 'NB NDC' )
    label.SetFillStyle(0)
    label.SetBorderSize(0)
    label.SetLineWidth(0)
    label.SetLineStyle(0)
    label.AddText( "37.19 fb^{-1} (13 TeV)" )
    label.SetTextSize( 0.033 )
    label.SetTextAlign(11)
    label.SetTextFont( 42 )
    label.SetTextColor( 1 )
    return label

#----------------------------------

entries = diphoton_tree.GetEntries()
print 'Entries:', entries
if testing: entries, experiments = test_events, 1

v_count, v_20sig, v_5sig,  v_3sig, v_2sig = [], [], [], [], []

for e in range(experiments):

    count, matching_2sig, matching_3sig, matching_5sig, matching_20sig = 0, 0, 0, 0, 0
    plotting = False
    gr_estimate.Set(0)

    for i in range(entries):
        diphoton_tree.GetEntry(i)
        
        v_xim, v_xip = [], []
    
        if data_:
            era, crossingAngle = diph_struct.era, diph_struct.crossingAngle
        else:
            #era = random.choice(v_eras)
            #crossingAngle = random.choice(v_crossingAngles)
            era = getEra(year)
            crossingAngle = getXangle( diph_struct.era )
            

        # Get entry by era and crossingAngle
        if era == '2016B': tree_B.GetEntry( random.randrange(0,tree_B.GetEntries()) )
        elif era == '2016C': tree_C.GetEntry( random.randrange(0,tree_C.GetEntries()) )
        elif era == '2016G': tree_G.GetEntry( random.randrange(0,tree_G.GetEntries()) )

        if era == '2017B':
            if crossingAngle == 120: tree_B_120.GetEntry( random.randrange(0,tree_B_120.GetEntries()) )        
            if crossingAngle == 130: tree_B_130.GetEntry( random.randrange(0,tree_B_130.GetEntries()) )        
            if crossingAngle == 140: tree_B_140.GetEntry( random.randrange(0,tree_B_140.GetEntries()) )        
            if crossingAngle == 150: tree_B_150.GetEntry( random.randrange(0,tree_B_150.GetEntries()) )        
        elif era == '2017C':
            if crossingAngle == 120: tree_C_120.GetEntry( random.randrange(0,tree_C_120.GetEntries()) )        
            if crossingAngle == 130: tree_C_130.GetEntry( random.randrange(0,tree_C_130.GetEntries()) )        
            if crossingAngle == 140: tree_C_140.GetEntry( random.randrange(0,tree_C_140.GetEntries()) )        
            if crossingAngle == 150: tree_C_150.GetEntry( random.randrange(0,tree_C_150.GetEntries()) )        
        elif era == '2017D':
            if crossingAngle == 120: tree_D_120.GetEntry( random.randrange(0,tree_D_120.GetEntries()) )        
            if crossingAngle == 130: tree_D_130.GetEntry( random.randrange(0,tree_D_130.GetEntries()) )        
            if crossingAngle == 140: tree_D_140.GetEntry( random.randrange(0,tree_D_140.GetEntries()) )        
            if crossingAngle == 150: tree_D_150.GetEntry( random.randrange(0,tree_D_150.GetEntries()) )        
        elif era == '2017E':
            if crossingAngle == 120: tree_E_120.GetEntry( random.randrange(0,tree_E_120.GetEntries()) )        
            if crossingAngle == 130: tree_E_130.GetEntry( random.randrange(0,tree_E_130.GetEntries()) )        
            if crossingAngle == 140: tree_E_140.GetEntry( random.randrange(0,tree_E_140.GetEntries()) )        
            if crossingAngle == 150: tree_E_150.GetEntry( random.randrange(0,tree_E_150.GetEntries()) )        
        elif era == '2017F':
            if crossingAngle == 120: tree_F_120.GetEntry( random.randrange(0,tree_F_120.GetEntries()) )        
            if crossingAngle == 130: tree_F_130.GetEntry( random.randrange(0,tree_F_130.GetEntries()) )        
            if crossingAngle == 140: tree_F_140.GetEntry( random.randrange(0,tree_F_140.GetEntries()) )        
            if crossingAngle == 150: tree_F_150.GetEntry( random.randrange(0,tree_F_150.GetEntries()) )        


        if era == '2018A':
            if crossingAngle == 120: tree_A_120.GetEntry( random.randrange(0,tree_A_120.GetEntries()) )        
            if crossingAngle == 121: tree_A_121.GetEntry( random.randrange(0,tree_A_121.GetEntries()) )        
            if crossingAngle == 122: tree_A_122.GetEntry( random.randrange(0,tree_A_122.GetEntries()) )        
            if crossingAngle == 123: tree_A_123.GetEntry( random.randrange(0,tree_A_123.GetEntries()) )        
            if crossingAngle == 124: tree_A_124.GetEntry( random.randrange(0,tree_A_124.GetEntries()) )        
            if crossingAngle == 125: tree_A_125.GetEntry( random.randrange(0,tree_A_125.GetEntries()) )        
            if crossingAngle == 126: tree_A_126.GetEntry( random.randrange(0,tree_A_126.GetEntries()) )        
            if crossingAngle == 127: tree_A_127.GetEntry( random.randrange(0,tree_A_127.GetEntries()) )        
            if crossingAngle == 128: tree_A_128.GetEntry( random.randrange(0,tree_A_128.GetEntries()) )        
            if crossingAngle == 129: tree_A_129.GetEntry( random.randrange(0,tree_A_129.GetEntries()) )        
            if crossingAngle == 130: tree_A_130.GetEntry( random.randrange(0,tree_A_130.GetEntries()) )        
            if crossingAngle == 131: tree_A_131.GetEntry( random.randrange(0,tree_A_131.GetEntries()) )        
            if crossingAngle == 132: tree_A_132.GetEntry( random.randrange(0,tree_A_132.GetEntries()) )        
            if crossingAngle == 133: tree_A_133.GetEntry( random.randrange(0,tree_A_133.GetEntries()) )        
            if crossingAngle == 134: tree_A_134.GetEntry( random.randrange(0,tree_A_134.GetEntries()) )        
            if crossingAngle == 135: tree_A_135.GetEntry( random.randrange(0,tree_A_135.GetEntries()) )        
            if crossingAngle == 136: tree_A_136.GetEntry( random.randrange(0,tree_A_136.GetEntries()) )        
            if crossingAngle == 137: tree_A_137.GetEntry( random.randrange(0,tree_A_137.GetEntries()) )        
            if crossingAngle == 138: tree_A_138.GetEntry( random.randrange(0,tree_A_138.GetEntries()) )        
            if crossingAngle == 139: tree_A_139.GetEntry( random.randrange(0,tree_A_139.GetEntries()) )        
            if crossingAngle == 140: tree_A_140.GetEntry( random.randrange(0,tree_A_140.GetEntries()) )        
            if crossingAngle == 141: tree_A_141.GetEntry( random.randrange(0,tree_A_141.GetEntries()) )        
            if crossingAngle == 142: tree_A_142.GetEntry( random.randrange(0,tree_A_142.GetEntries()) )        
            if crossingAngle == 143: tree_A_143.GetEntry( random.randrange(0,tree_A_143.GetEntries()) )        
            if crossingAngle == 144: tree_A_144.GetEntry( random.randrange(0,tree_A_144.GetEntries()) )        
            if crossingAngle == 145: tree_A_145.GetEntry( random.randrange(0,tree_A_145.GetEntries()) )        
            if crossingAngle == 146: tree_A_146.GetEntry( random.randrange(0,tree_A_146.GetEntries()) )        
            if crossingAngle == 147: tree_A_147.GetEntry( random.randrange(0,tree_A_147.GetEntries()) )        
            if crossingAngle == 148: tree_A_148.GetEntry( random.randrange(0,tree_A_148.GetEntries()) )        
            if crossingAngle == 149: tree_A_149.GetEntry( random.randrange(0,tree_A_149.GetEntries()) )        
            if crossingAngle == 150: tree_A_150.GetEntry( random.randrange(0,tree_A_150.GetEntries()) )        
            if crossingAngle == 151: tree_A_151.GetEntry( random.randrange(0,tree_A_151.GetEntries()) )        
            if crossingAngle == 152: tree_A_152.GetEntry( random.randrange(0,tree_A_152.GetEntries()) )        
            if crossingAngle == 153: tree_A_153.GetEntry( random.randrange(0,tree_A_153.GetEntries()) )        
            if crossingAngle == 154: tree_A_154.GetEntry( random.randrange(0,tree_A_154.GetEntries()) )        
            if crossingAngle == 155: tree_A_155.GetEntry( random.randrange(0,tree_A_155.GetEntries()) )        
            if crossingAngle == 156: tree_A_156.GetEntry( random.randrange(0,tree_A_156.GetEntries()) )        
            if crossingAngle == 157: tree_A_157.GetEntry( random.randrange(0,tree_A_157.GetEntries()) )        
            if crossingAngle == 158: tree_A_158.GetEntry( random.randrange(0,tree_A_158.GetEntries()) )        
            #if crossingAngle == 159: tree_A_159.GetEntry( random.randrange(0,tree_A_159.GetEntries()) )  # Doesn't exist, weird      
            if crossingAngle == 160: tree_A_160.GetEntry( random.randrange(0,tree_A_160.GetEntries()) )        
        if era == '2018B':
            if crossingAngle == 120: tree_B_120.GetEntry( random.randrange(0,tree_B_120.GetEntries()) )        
            if crossingAngle == 121: tree_B_121.GetEntry( random.randrange(0,tree_B_121.GetEntries()) )        
            if crossingAngle == 122: tree_B_122.GetEntry( random.randrange(0,tree_B_122.GetEntries()) )        
            if crossingAngle == 123: tree_B_123.GetEntry( random.randrange(0,tree_B_123.GetEntries()) )        
            if crossingAngle == 124: tree_B_124.GetEntry( random.randrange(0,tree_B_124.GetEntries()) )        
            if crossingAngle == 125: tree_B_125.GetEntry( random.randrange(0,tree_B_125.GetEntries()) )        
            if crossingAngle == 126: tree_B_126.GetEntry( random.randrange(0,tree_B_126.GetEntries()) )        
            if crossingAngle == 127: tree_B_127.GetEntry( random.randrange(0,tree_B_127.GetEntries()) )        
            if crossingAngle == 128: tree_B_128.GetEntry( random.randrange(0,tree_B_128.GetEntries()) )        
            if crossingAngle == 129: tree_B_129.GetEntry( random.randrange(0,tree_B_129.GetEntries()) )        
            if crossingAngle == 130: tree_B_130.GetEntry( random.randrange(0,tree_B_130.GetEntries()) )        
            if crossingAngle == 131: tree_B_131.GetEntry( random.randrange(0,tree_B_131.GetEntries()) )        
            if crossingAngle == 132: tree_B_132.GetEntry( random.randrange(0,tree_B_132.GetEntries()) )        
            if crossingAngle == 133: tree_B_133.GetEntry( random.randrange(0,tree_B_133.GetEntries()) )        
            if crossingAngle == 134: tree_B_134.GetEntry( random.randrange(0,tree_B_134.GetEntries()) )        
            if crossingAngle == 135: tree_B_135.GetEntry( random.randrange(0,tree_B_135.GetEntries()) )        
            if crossingAngle == 136: tree_B_136.GetEntry( random.randrange(0,tree_B_136.GetEntries()) )        
            if crossingAngle == 137: tree_B_137.GetEntry( random.randrange(0,tree_B_137.GetEntries()) )        
            if crossingAngle == 138: tree_B_138.GetEntry( random.randrange(0,tree_B_138.GetEntries()) )        
            if crossingAngle == 139: tree_B_139.GetEntry( random.randrange(0,tree_B_139.GetEntries()) )        
            if crossingAngle == 140: tree_B_140.GetEntry( random.randrange(0,tree_B_140.GetEntries()) )        
            if crossingAngle == 141: tree_B_141.GetEntry( random.randrange(0,tree_B_141.GetEntries()) )        
            if crossingAngle == 142: tree_B_142.GetEntry( random.randrange(0,tree_B_142.GetEntries()) )        
            if crossingAngle == 143: tree_B_143.GetEntry( random.randrange(0,tree_B_143.GetEntries()) )        
            if crossingAngle == 144: tree_B_144.GetEntry( random.randrange(0,tree_B_144.GetEntries()) )        
            if crossingAngle == 145: tree_B_145.GetEntry( random.randrange(0,tree_B_145.GetEntries()) )        
            if crossingAngle == 146: tree_B_146.GetEntry( random.randrange(0,tree_B_146.GetEntries()) )        
            if crossingAngle == 147: tree_B_147.GetEntry( random.randrange(0,tree_B_147.GetEntries()) )        
            if crossingAngle == 148: tree_B_148.GetEntry( random.randrange(0,tree_B_148.GetEntries()) )        
            if crossingAngle == 149: tree_B_149.GetEntry( random.randrange(0,tree_B_149.GetEntries()) )        
            if crossingAngle == 150: tree_B_150.GetEntry( random.randrange(0,tree_B_150.GetEntries()) )        
            if crossingAngle == 151: tree_B_151.GetEntry( random.randrange(0,tree_B_151.GetEntries()) )        
            if crossingAngle == 152: tree_B_152.GetEntry( random.randrange(0,tree_B_152.GetEntries()) )        
            if crossingAngle == 153: tree_B_153.GetEntry( random.randrange(0,tree_B_153.GetEntries()) )        
            if crossingAngle == 154: tree_B_154.GetEntry( random.randrange(0,tree_B_154.GetEntries()) )        
            if crossingAngle == 155: tree_B_155.GetEntry( random.randrange(0,tree_B_155.GetEntries()) )        
            if crossingAngle == 156: tree_B_156.GetEntry( random.randrange(0,tree_B_156.GetEntries()) )        
            if crossingAngle == 157: tree_B_157.GetEntry( random.randrange(0,tree_B_157.GetEntries()) )        
            if crossingAngle == 158: tree_B_158.GetEntry( random.randrange(0,tree_B_158.GetEntries()) )        
            if crossingAngle == 159: tree_B_159.GetEntry( random.randrange(0,tree_B_159.GetEntries()) )        
            if crossingAngle == 160: tree_B_160.GetEntry( random.randrange(0,tree_B_160.GetEntries()) )        
        if era == '2018C':
            if crossingAngle == 120: tree_C_120.GetEntry( random.randrange(0,tree_C_120.GetEntries()) )        
            if crossingAngle == 121: tree_C_121.GetEntry( random.randrange(0,tree_C_121.GetEntries()) )        
            if crossingAngle == 122: tree_C_122.GetEntry( random.randrange(0,tree_C_122.GetEntries()) )        
            if crossingAngle == 123: tree_C_123.GetEntry( random.randrange(0,tree_C_123.GetEntries()) )        
            if crossingAngle == 124: tree_C_124.GetEntry( random.randrange(0,tree_C_124.GetEntries()) )        
            if crossingAngle == 125: tree_C_125.GetEntry( random.randrange(0,tree_C_125.GetEntries()) )        
            if crossingAngle == 126: tree_C_126.GetEntry( random.randrange(0,tree_C_126.GetEntries()) )        
            if crossingAngle == 127: tree_C_127.GetEntry( random.randrange(0,tree_C_127.GetEntries()) )        
            if crossingAngle == 128: tree_C_128.GetEntry( random.randrange(0,tree_C_128.GetEntries()) )        
            if crossingAngle == 129: tree_C_129.GetEntry( random.randrange(0,tree_C_129.GetEntries()) )        
            if crossingAngle == 130: tree_C_130.GetEntry( random.randrange(0,tree_C_130.GetEntries()) )        
            if crossingAngle == 131: tree_C_131.GetEntry( random.randrange(0,tree_C_131.GetEntries()) )        
            if crossingAngle == 132: tree_C_132.GetEntry( random.randrange(0,tree_C_132.GetEntries()) )        
            if crossingAngle == 133: tree_C_133.GetEntry( random.randrange(0,tree_C_133.GetEntries()) )        
            if crossingAngle == 134: tree_C_134.GetEntry( random.randrange(0,tree_C_134.GetEntries()) )        
            if crossingAngle == 135: tree_C_135.GetEntry( random.randrange(0,tree_C_135.GetEntries()) )        
            if crossingAngle == 136: tree_C_136.GetEntry( random.randrange(0,tree_C_136.GetEntries()) )        
            if crossingAngle == 137: tree_C_137.GetEntry( random.randrange(0,tree_C_137.GetEntries()) )        
            if crossingAngle == 138: tree_C_138.GetEntry( random.randrange(0,tree_C_138.GetEntries()) )        
            if crossingAngle == 139: tree_C_139.GetEntry( random.randrange(0,tree_C_139.GetEntries()) )        
            if crossingAngle == 140: tree_C_140.GetEntry( random.randrange(0,tree_C_140.GetEntries()) )        
            if crossingAngle == 141: tree_C_141.GetEntry( random.randrange(0,tree_C_141.GetEntries()) )        
            if crossingAngle == 142: tree_C_142.GetEntry( random.randrange(0,tree_C_142.GetEntries()) )        
            if crossingAngle == 143: tree_C_143.GetEntry( random.randrange(0,tree_C_143.GetEntries()) )        
            if crossingAngle == 144: tree_C_144.GetEntry( random.randrange(0,tree_C_144.GetEntries()) )        
            if crossingAngle == 145: tree_C_145.GetEntry( random.randrange(0,tree_C_145.GetEntries()) )        
            if crossingAngle == 146: tree_C_146.GetEntry( random.randrange(0,tree_C_146.GetEntries()) )        
            if crossingAngle == 147: tree_C_147.GetEntry( random.randrange(0,tree_C_147.GetEntries()) )        
            if crossingAngle == 148: tree_C_148.GetEntry( random.randrange(0,tree_C_148.GetEntries()) )        
            if crossingAngle == 149: tree_C_149.GetEntry( random.randrange(0,tree_C_149.GetEntries()) )        
            if crossingAngle == 150: tree_C_150.GetEntry( random.randrange(0,tree_C_150.GetEntries()) )        
            if crossingAngle == 151: tree_C_151.GetEntry( random.randrange(0,tree_C_151.GetEntries()) )        
            if crossingAngle == 152: tree_C_152.GetEntry( random.randrange(0,tree_C_152.GetEntries()) )        
            if crossingAngle == 153: tree_C_153.GetEntry( random.randrange(0,tree_C_153.GetEntries()) )        
            if crossingAngle == 154: tree_C_154.GetEntry( random.randrange(0,tree_C_154.GetEntries()) )        
            if crossingAngle == 155: tree_C_155.GetEntry( random.randrange(0,tree_C_155.GetEntries()) )        
            if crossingAngle == 156: tree_C_156.GetEntry( random.randrange(0,tree_C_156.GetEntries()) )        
            if crossingAngle == 157: tree_C_157.GetEntry( random.randrange(0,tree_C_157.GetEntries()) )        
            if crossingAngle == 158: tree_C_158.GetEntry( random.randrange(0,tree_C_158.GetEntries()) )        
            if crossingAngle == 159: tree_C_159.GetEntry( random.randrange(0,tree_C_159.GetEntries()) )        
            if crossingAngle == 160: tree_C_160.GetEntry( random.randrange(0,tree_C_160.GetEntries()) )        
        if era == '2018D':
            if crossingAngle == 120: tree_D_120.GetEntry( random.randrange(0,tree_D_120.GetEntries()) )        
            if crossingAngle == 121: tree_D_121.GetEntry( random.randrange(0,tree_D_121.GetEntries()) )        
            if crossingAngle == 122: tree_D_122.GetEntry( random.randrange(0,tree_D_122.GetEntries()) )        
            if crossingAngle == 123: tree_D_123.GetEntry( random.randrange(0,tree_D_123.GetEntries()) )        
            if crossingAngle == 124: tree_D_124.GetEntry( random.randrange(0,tree_D_124.GetEntries()) )        
            if crossingAngle == 125: tree_D_125.GetEntry( random.randrange(0,tree_D_125.GetEntries()) )        
            if crossingAngle == 126: tree_D_126.GetEntry( random.randrange(0,tree_D_126.GetEntries()) )        
            if crossingAngle == 127: tree_D_127.GetEntry( random.randrange(0,tree_D_127.GetEntries()) )        
            if crossingAngle == 128: tree_D_128.GetEntry( random.randrange(0,tree_D_128.GetEntries()) )        
            if crossingAngle == 129: tree_D_129.GetEntry( random.randrange(0,tree_D_129.GetEntries()) )        
            if crossingAngle == 130: tree_D_130.GetEntry( random.randrange(0,tree_D_130.GetEntries()) )        
            if crossingAngle == 131: tree_D_131.GetEntry( random.randrange(0,tree_D_131.GetEntries()) )        
            if crossingAngle == 132: tree_D_132.GetEntry( random.randrange(0,tree_D_132.GetEntries()) )        
            if crossingAngle == 133: tree_D_133.GetEntry( random.randrange(0,tree_D_133.GetEntries()) )        
            if crossingAngle == 134: tree_D_134.GetEntry( random.randrange(0,tree_D_134.GetEntries()) )        
            if crossingAngle == 135: tree_D_135.GetEntry( random.randrange(0,tree_D_135.GetEntries()) )        
            if crossingAngle == 136: tree_D_136.GetEntry( random.randrange(0,tree_D_136.GetEntries()) )        
            if crossingAngle == 137: tree_D_137.GetEntry( random.randrange(0,tree_D_137.GetEntries()) )        
            if crossingAngle == 138: tree_D_138.GetEntry( random.randrange(0,tree_D_138.GetEntries()) )        
            if crossingAngle == 139: tree_D_139.GetEntry( random.randrange(0,tree_D_139.GetEntries()) )        
            if crossingAngle == 140: tree_D_140.GetEntry( random.randrange(0,tree_D_140.GetEntries()) )        
            if crossingAngle == 141: tree_D_141.GetEntry( random.randrange(0,tree_D_141.GetEntries()) )        
            if crossingAngle == 142: tree_D_142.GetEntry( random.randrange(0,tree_D_142.GetEntries()) )        
            if crossingAngle == 143: tree_D_143.GetEntry( random.randrange(0,tree_D_143.GetEntries()) )        
            if crossingAngle == 144: tree_D_144.GetEntry( random.randrange(0,tree_D_144.GetEntries()) )        
            if crossingAngle == 145: tree_D_145.GetEntry( random.randrange(0,tree_D_145.GetEntries()) )        
            if crossingAngle == 146: tree_D_146.GetEntry( random.randrange(0,tree_D_146.GetEntries()) )        
            if crossingAngle == 147: tree_D_147.GetEntry( random.randrange(0,tree_D_147.GetEntries()) )        
            if crossingAngle == 148: tree_D_148.GetEntry( random.randrange(0,tree_D_148.GetEntries()) )        
            if crossingAngle == 149: tree_D_149.GetEntry( random.randrange(0,tree_D_149.GetEntries()) )        
            if crossingAngle == 150: tree_D_150.GetEntry( random.randrange(0,tree_D_150.GetEntries()) )        
            if crossingAngle == 151: tree_D_151.GetEntry( random.randrange(0,tree_D_151.GetEntries()) )        
            if crossingAngle == 152: tree_D_152.GetEntry( random.randrange(0,tree_D_152.GetEntries()) )        
            if crossingAngle == 153: tree_D_153.GetEntry( random.randrange(0,tree_D_153.GetEntries()) )        
            if crossingAngle == 154: tree_D_154.GetEntry( random.randrange(0,tree_D_154.GetEntries()) )        
            if crossingAngle == 155: tree_D_155.GetEntry( random.randrange(0,tree_D_155.GetEntries()) )        
            if crossingAngle == 156: tree_D_156.GetEntry( random.randrange(0,tree_D_156.GetEntries()) )        
            if crossingAngle == 157: tree_D_157.GetEntry( random.randrange(0,tree_D_157.GetEntries()) )        
            if crossingAngle == 158: tree_D_158.GetEntry( random.randrange(0,tree_D_158.GetEntries()) )        
            if crossingAngle == 159: tree_D_159.GetEntry( random.randrange(0,tree_D_159.GetEntries()) )        
            if crossingAngle == 160: tree_D_160.GetEntry( random.randrange(0,tree_D_160.GetEntries()) )        

        if pro_struct.num_m == 0 or pro_struct.num_p == 0: continue

        for j in range(pro_struct.num_m): v_xim.append( pro_struct.xim[j] )
        for j in range(pro_struct.num_p): v_xip.append( pro_struct.xip[j] )


        #------ Choose the best diproton candidate ------

        # Use the proton from each arm best matching in xi
        #pro_xim, pro_xip = find_nearest(v_xim, diph_struct.xim), find_nearest(v_xip, diph_struct.xip) 

        # Use the proton from each arm with the highest xi
        pro_xim, pro_xip = max(v_xim), max(v_xip)

        # Only use events with exactly one proton in each arm
        #if len(v_xim) != 1 or len(v_xip) != 1: continue
        #pro_xim, pro_xip = v_xim[0], v_xip[0]
        
        #------------------------------------------------


        #h_xip.Fill( pro_xip ), h_xim.Fill( pro_xim )
        #h2_xim.Fill( pro_xim, diph_struct.xim )
        #h2_xip.Fill( pro_xip, diph_struct.xip )

        # Check for matching
        mass_match, rap_match = isMatching(diph_struct.mass, diph_struct.rap, pro_xim, pro_xip)
        
        # Plot events
        if plotting: gr_estimate.SetPoint( gr_estimate.GetN(), mass_match, rap_match )
        h2_estimate.Fill(mass_match, rap_match)

        count += diph_struct.weight
        if abs(mass_match) < 20 and abs(rap_match) < 20: matching_20sig += diph_struct.weight
        if abs(mass_match) < 5 and abs(rap_match) < 5: matching_5sig += diph_struct.weight
        if abs(mass_match) < 3 and abs(rap_match) < 3: matching_3sig += diph_struct.weight
        if abs(mass_match) < 2 and abs(rap_match) < 2: matching_2sig += diph_struct.weight

    # Monitor experiments
    if e*100%experiments == 0: print str(100*e/experiments)+'% done', '--- Averages', 'Total:', getAverage(v_count), '20 sigma:', getAverage(v_20sig), '5 sigma:', getAverage(v_5sig), '3 sigma:', getAverage(v_3sig), '2 sigma:', getAverage(v_2sig)
    v_20sig.append(matching_20sig), v_5sig.append(matching_5sig), v_3sig.append(matching_3sig), v_2sig.append(matching_2sig), v_count.append(count)
    if matching_2sig > 3 or matching_3sig > 7: plotting = False
    if plotting: plot_estimate( gr_estimate, 'background_estimate_%d.png' % e )

    if e+1 in points: 
        converge.append([e+1,getAverage(v_3sig),getAverage(v_2sig)])

print ''
print ''
print ''
print 'Average matching ----> 20 sigma:', getAverage(v_20sig), '5 sigma:', getAverage(v_5sig), '3 sigma:', getAverage(v_3sig), '2 sigma:', getAverage(v_2sig)
print 'Average num events:', getAverage(v_count)


with open('2sigma_'+sample_string+'_'+method+'.txt','w') as f2:
    for count in v_2sig:
        f2.write(str(count)+'\n')

with open('3sigma_'+sample_string+'_'+method+'.txt','w') as f3:
    for count in v_3sig:
        f3.write(str(count)+'\n')

with open('convergence_'+sample_string+'_'+method+'.txt','w') as f4:
    for line in converge:
        f4.write(str(line)+'\n')



'''
# Plotting for cross checks

c = TCanvas('c','',750,600)
c.cd()
h2_estimate.GetXaxis().SetTitle("(m_{pp}-m_{#gamma#gamma})/#sigma(m_{pp}-m_{#gamma#gamma})")
h2_estimate.GetYaxis().SetTitle("(y_{pp} - y_{#gamma#gamma})/#sigma(y_{pp} - y_{#gamma#gamma})")
h2_estimate.Draw('colz')
c.SaveAs('h2_estimate.png')


c1 = TCanvas('c1','',750,600)
c1.cd()
h_xim.Draw()
c1.SaveAs('h_pro_xim.png')

c2 = TCanvas('c2','',750,600)
c2.cd()
h_xip.Draw()
c2.SaveAs('h_pro_xip.png')

c3 = TCanvas('c3', '', 750, 600)
c3.cd()
h2_xim.GetXaxis().SetTitle('PPS #xi^{-}')
h2_xim.GetYaxis().SetTitle('CMS #xi^{-}')
h2_xim.Draw('colz')
c3.SaveAs('h2_xim_matching.png')

c4 = TCanvas('c4', '', 750, 600)
c4.cd()
h2_xip.GetXaxis().SetTitle('PPS #xi^{-}')
h2_xip.GetYaxis().SetTitle('CMS #xi^{-}')
h2_xip.Draw('colz')
c4.SaveAs('h2_xip_matching.png')

c5 = TCanvas('c5', '2#sigma Matching', 740, 600)
c5.cd()
distribution_2sig = TH1F( 'distribution_2sig', '', 100, 0, 15)
for x in v_2sig:
    distribution_2sig.Fill(x)
distribution_2sig.GetYaxis().SetTitle('Experiments')
distribution_2sig.GetXaxis().SetTitle('Events matching')
distribution_2sig.Draw()
std = round( distribution_2sig.GetStdDev(), 3 )
std_label = TPaveText( 0.6, 0.8, 0.64, 0.87, 'NB NDC' )
std_label.SetFillStyle(0)
std_label.SetBorderSize(0)
std_label.SetLineWidth(0)
std_label.SetLineStyle(0)
std_label.SetTextAlign(11)
std_label.AddText( "Standard Deviation = " + str(std) )
std_label.SetTextSize(0.03)
std_label.SetTextFont( 42 )
std_label.SetTextColor( 1 )
std_label.Draw()
c5.SaveAs('2sigma_distribution.png')

c6 = TCanvas('c6', 'c6', 740, 600)
h_2sig_v_total = TH2F('h_2sig_v_total', '', 14, 0, 14, 50, 160, 210)
for i in range( len(v_count) ):
    h_2sig_v_total.Fill( v_2sig[i], v_count[i] )
h_2sig_v_total.GetXaxis().SetTitle('Events at 2#sigma matching')
h_2sig_v_total.GetYaxis().SetTitle('Total Events (with protons)')
h_2sig_v_total.Draw('colz')
c6.SaveAs('matching_v_total.png')
'''
